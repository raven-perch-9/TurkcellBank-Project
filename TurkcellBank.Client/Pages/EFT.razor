@page "/eft"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using MudBlazor
@layout MainLayout
@inject HttpClient Http
@inject NavigationManager Nav
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JS

<div style="padding-top:10px;">
    <MudPaper Class="p-2" Style="background:#F5F5F5; border-radius:20px; margin-left:30px; margin-bottom:30px; max-width:960px">
        <MudText Typo="Typo.h5" Class="mb-4" Style="font-weight:bold; margin-left:15px;">EFT İşlemi</MudText>

        <MudText Typo="Typo.h6" Class="ml-4">Para Gönderen Hesap IBAN Adresi</MudText>
        <MudTextField @bind-Value="model.FromAccountIBAN" Label="IBAN giriniz" Variant="Variant.Outlined" Class="mb-3" />
        <MudText Typo="Typo.h6" Class="ml-4">Paranın Gönderileceği Hesabın IBAN Adresi</MudText>
        <MudTextField @bind-Value="model.ToAccountIBAN" Label="IBAN giriniz" Variant="Variant.Outlined" Class="mb-3" />
        <MudText Typo="Typo.h6" Class="ml-4">Gönderilecek Miktar</MudText>
        <MudNumericField T="decimal" @bind-Value="model.Amount" Label="Tutar giriniz" Variant="Variant.Outlined" Min="0.01m"
                         Step="0.01m" Immediate="true" Class="mb-3" />
        <MudText Typo="Typo.h6" Class="ml-4">Açıklama Giriniz (İsteğe Bağlı) </MudText>
        <MudTextField @bind-Value="model.Description" Label="Açıklama" Variant="Variant.Outlined" Class="mb-3" />

        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="TransferRequest" 
            Style="margin-top:10px; margin-left:30px; min-width:150px;">ONAY</MudButton>
    </MudPaper>
</div>

@code
{
    private TransferRequestModel model = new();
    private const string OUR_BANK_CODE = "43210";
    private string? validationMessage;

    protected override async Task OnInitializedAsync()
    {
        var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
        if (!string.IsNullOrWhiteSpace(token))
        {
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        }
        else
        {
            Snackbar.Add("Oturum bulunamadı. Lütfen tekrar giriş yapın.", Severity.Warning);
        }
    }
    private async Task TransferRequest()
    {
        if (!ValidateForEFT())
        {
            Snackbar.Add(validationMessage ?? "Banka içi transferler için havale sayfasının kullanın.", Severity.Error);
            return;
        }
        var response = await Http.PostAsJsonAsync("api/user/transfer", model);
        model = new TransferRequestModel();

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Transfer Başarılı", Severity.Success);
        }
        else
        {
            Snackbar.Add("Transfer başarısız.", Severity.Error);
        }
    }
    private bool ValidateForEFT()
    {
        validationMessage = null;
        var detected = DetectBankCode(model.ToAccountIBAN);
        if (detected == null)
        {
            validationMessage = "IBAN formatı geçersiz.";
            return false;
        }
        if (string.Equals(detected, OUR_BANK_CODE, StringComparison.Ordinal))
        {
            validationMessage = "Bu IBAN bankamızda görünüyor. Lütfen Havale sayfasını kullanın.";
            return false;
        }
        return true;
    }
    private static string? DetectBankCode(string? IBAN)
    {
        if (IBAN==null)
        {
            return null;
        }
		var s = IBAN.Replace(" ", "").ToUpperInvariant();
		return s.Substring(2, 5);
	}
    public class TransferRequestModel
    {
        public string FromAccountIBAN { get; set; }
        public string ToAccountIBAN { get; set; }
        public decimal Amount { get; set; }
        public string? Description { get; set; }
    }
}