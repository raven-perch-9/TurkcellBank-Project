@page "/register"
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using MudBlazor
@inject HttpClient Http
@inject NavigationManager Nav

<div style="background-color:white; min-height:100vh; padding:40px 160px;">
    <img src="Images/Male_Logo.jpg"
         alt="TurkcellBank Logo"
         style="width:180px; margin-bottom:30px;" />

    <MudText Typo="Typo.h5" Class="mb-4" Style="color:black; font-weight:600;">
        Create Your TurkcellBank Account
    </MudText>      

    <EditForm Model="@registerModel" OnValidSubmit="HandleRegister" style="max-width:450px;">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <MudTextField @bind-Value="registerModel.FullName" 
                      Label="Full Name" 
                      Variant="Variant.Filled" 
                      FullWidth="true" 
                      Margin="Margin.Dense" 
                      Style="border-radius:8px; background-color:#f5f5f5;" />
        <MudTextField @bind-Value="registerModel.Username" 
                      Label="Username" 
                      Variant="Variant.Filled" 
                      FullWidth="true" 
                      Margin="Margin.Dense" 
                      Style="border-radius:8px; background-color:#f5f5f5;" 
                      Class="mt-3" />
        <MudTextField @bind-Value="registerModel.Email" 
                      Label="Email Address" 
                      Variant="Variant.Filled" 
                      FullWidth="true" 
                      Margin="Margin.Dense" 
                      Style="border-radius:8px; background-color:#f5f5f5;" 
                      Class="mt-3" />
        <MudTextField @bind-Value="registerModel.Password" 
                      Label="Password" 
                      Variant="Variant.Filled" 
                      FullWidth="true" 
                      InputType="InputType.Password" 
                      Margin="Margin.Dense" 
                      Style="border-radius:8px; background-color:#f5f5f5;" 
                      Class="mt-3" />

        <MudButton Variant="Variant.Filled" 
                   Class="mt-4" 
                   FullWidth="true" 
                   ButtonType="ButtonType.Submit" 
                   Style="background-color:#FFD100; color:#003399; border-radius:8px; font-weight:600; height:45px;">
            Register
        </MudButton>
    </EditForm>

    @if (!string.IsNullOrEmpty(message))
    {
        <MudAlert Severity="@((isSuccess) ? Severity.Success : Severity.Error)" Class="mt-3" Style="max-width:450px;">
            @message
        </MudAlert>
    }

    <MudText Class="mt-4" Style="color:#555; max-width:450px;">
        Already have an account? <MudLink Href="/login" Style="color:#003399; font-weight:500;">Login here</MudLink>
    </MudText>
</div>

@code {
    private RegisterModel registerModel = new();
    private string message = string.Empty;
    private bool isSuccess;

    private async Task HandleRegister()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/user/register", registerModel);

            if (response.IsSuccessStatusCode)
            {
                isSuccess = true;
                message = "Registration successful! Redirecting to login...";
                await Task.Delay(1500);
                Nav.NavigateTo("/login");
            }
            else
            {
                isSuccess = false;
                message = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            isSuccess = false;
            message = $"Error: {ex.Message}";
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Full name is required")]
        public string FullName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = string.Empty;
    }
}