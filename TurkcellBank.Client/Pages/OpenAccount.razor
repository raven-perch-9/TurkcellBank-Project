@page "/open-account"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@layout MainLayout
@using MudBlazor
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JS
@inject NavigationManager Nav

<MudGrid >
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-2" Style="background:#F5F5F5; border-radius:16px; width:100%;">
            <MudText Typo="Typo.h5" Class="mb-4">Hesap Açımı</MudText>
            <MudForm Model="@newAccount" @ref="form" @bind-IsValid="@success"
            @bind-Errors="@errors">

                <MudSelect @bind-Value="newAccount.AccountType" Label="Hesap Türü" Variant="Variant.Outlined" Style="background:white;">
                    @foreach (var type in accountTypes)
                    {
                        <MudSelectItem Value="@type">@type</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect @bind-Value="newAccount.CurrencyCode" Label="Para Birimi" Variant="Variant.Outlined" Style="background:white;">
                    @foreach (var currency in currencyTypes)
                    {
                        <MudSelectItem Value="@currency">@currency</MudSelectItem>
                    }
                </MudSelect>

                <MudStack Row="true" Spacing="2" Class="mt-3">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@OpenAccountAction">
                        Hesap Aç
                    </MudButton>
                </MudStack>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    MudForm form = new();
    bool success;
    string[] errors = { };

    private NewAccountModel newAccount = new();

    private readonly List<string> accountTypes = new() { "VadesizMevduat", "VadeliMevduat" };
    private readonly List<string> currencyTypes = new() { "TRY", "USD", "EUR" };
    private readonly Dictionary<string, int> accountTypeMap = new()
        {
            ["VadesizMevduat"] = 1,
            ["VadeliMevduat"] = 2
        };
    private readonly Dictionary<string, int> currencyMap = new()
        {
            ["TRY"] = 1,
            ["USD"] = 2,
            ["EUR"] = 3
        };

    private bool CanOpen => !string.IsNullOrWhiteSpace(newAccount.AccountType) &&
                            !string.IsNullOrWhiteSpace(newAccount.CurrencyCode);

    private async Task OpenAccountAction()
    {
        if (!CanOpen)
        {
            Snackbar.Add("Lütfen hesap türü ve para birimi seçiniz.", Severity.Warning);
            return;
        }
        try
        {
            var body = new
            {
                accountType = accountTypeMap[newAccount.AccountType],
                currencyCode = currencyMap[newAccount.CurrencyCode],
                initialDeposit = 0m
            };

            var response = await Http.PostAsJsonAsync("api/user/open", body);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Hesap başarıyla açıldı.", Severity.Success);

                newAccount = new(); // Reset form

                StateHasChanged(); // Refresh UI
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Hesap açma başarısız: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Hesap açma sırasında hata: {ex.Message}", Severity.Error);
        }
    }

    public class NewAccountModel
    {
        public string AccountType { get; set; } = string.Empty;
        public string CurrencyCode { get; set; } = string.Empty;
        public decimal InitialDeposit { get; set; } = 0m;
    }
}