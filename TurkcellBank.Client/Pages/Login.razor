@page "/"
@page "/login"
@layout LoginLayout
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using MudBlazor
@inject HttpClient Http
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider

<MudPaper Class="p-8" Elevation="8" Style="width:400px; background-color:white; border-radius:16px; border:20px solid white">
    <img src="Images/Male_Logo.jpg"
         alt="TurkcellBank Logo"
         style="width:200px; margin:0 auto 25px; display:block;" />
    <MudText Typo="Typo.h5" Class="mb-4" Align="Align.Center" Style="color:black; font-weight:600;">
        Welcome to TurkcellBank
    </MudText>      

    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <MudTextField @bind-Value="loginModel.Identifier" 
                      Label="Mail Address or Username" 
                      Variant="Variant.Filled" 
                      FullWidth="true" 
                      Margin="Margin.Dense" 
                      Style="border-radius:8px;" />
        <MudTextField @bind-Value="loginModel.Password" 
                      Label="Password" 
                      Variant="Variant.Filled" 
                      FullWidth="true" 
                      InputType="InputType.Password" 
                      Margin="Margin.Dense" 
                      Style="border-radius:8px;" 
                      Class="mt-3" />

        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" FullWidth="true" ButtonType="ButtonType.Submit" Style="background-color:#FFD100; color:#003399; border-radius:8px; font-weight:600; height:45px;">
            Login
        </MudButton>
    </EditForm>

    @if (!string.IsNullOrEmpty(message))
    {
        <MudAlert Severity="@((isSuccess) ? Severity.Success : Severity.Error)" Class="mt-3">
            @message
        </MudAlert>
    }

    <MudText Class="mt-4 text-center" Style="color:#555;">
        Don’t have an account? <MudLink Href="/register" Style="color:#003399; font-weight:500;">Register here</MudLink>
    </MudText>
</MudPaper>

@code {
    private LoginModel loginModel = new();
    private string message = string.Empty;
    private bool isSuccess;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/user/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();
                var jwtProvider = (JwtAuthStateProvider)AuthStateProvider;
                await jwtProvider.MarkUserAsAuthenticated(token);
                message = "Login successful. Redirecting...";
                isSuccess = true;
                await Task.Delay(200);
                Nav.NavigateTo("/home");
            }
            else
            {
                message = "Login failed. Check your email or password.";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isSuccess = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email or username is required")]
        public string Identifier { get; set; } = string.Empty;
        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}