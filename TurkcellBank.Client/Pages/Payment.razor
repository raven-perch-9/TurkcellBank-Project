@page "/payment"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using MudBlazor
@layout MainLayout
@inject HttpClient Http
@inject NavigationManager Nav
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JS

<div style="padding-top:10px;">
    <MudPaper Class="p-4" Style="border-radius:20px; max-width:500px; margin-left:30px;">
        <MudText Typo="Typo.h3" Class="mb-4">Ödeme Ekranı</MudText>

        <MudText Typo="Typo.h6" Class="mb-4">Order ID</MudText>
        <MudNumericField T="int" @bind-Value="model.OrderId" Label="" Variant="Variant.Outlined" Min="1"
                         Step="1" Immediate="true" Class="mb-3" />
        <MudText Typo="Typo.h6" Class="mb-4">Ödeme Tutarı</MudText>
        <MudNumericField T="decimal" @bind-Value="model.Amount" Label="" Variant="Variant.Outlined" Min="0.01m"
                         Step="0.01m" Immediate="true" Class="mb-3" />
        <MudText Typo="Typo.h6" Class="mb-4">Para Birimi</MudText>
        <MudSelect @bind-Value="model.Currency" Label="" Variant="Variant.Outlined">
            @foreach (var currency in currencyTypes)
            {
                <MudSelectItem Value="@currency">@currency</MudSelectItem>
            }
        </MudSelect>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="PaymentRequest">ONAY</MudButton>
    </MudPaper>
</div>

@code
{
    MudForm form = new();
    private PaymentRequestModel model = new();
    string[] errors = { };

    private readonly List<string> currencyTypes = new() { "TRY", "USD", "EUR" };
    private readonly Dictionary<string, int> currencyMap = new()
    {
        ["TRY"] = 1,
        ["USD"] = 2,
        ["EUR"] = 3
    };

    private bool CanOpen => !string.IsNullOrWhiteSpace(model.Currency) &&
                            model.Amount > 0m &&
                            model.OrderId > 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            if (!string.IsNullOrWhiteSpace(token))
            {
                Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }
            else
            {
                Snackbar.Add("Oturum bulunamadı. Lütfen tekrar giriş yapın.", Severity.Warning);
            }
        }
        catch(Exception ex)
        {
            Snackbar.Add("Bir hata oluştu. Lütfen tekrar giriş yapın.", Severity.Error);
        }
    }

    private async Task PaymentRequest()
    {
        if(!CanOpen)
        {
            Snackbar.Add("Lütfen geçerli OrderId, para birimi ve tutar giriniz.", Severity.Error);
        }
        var body = new
        {
            OderId = model.OrderId,
            Amount = model.Amount,
            Currency = currencyMap[model.Currency]
        };

        var response = await Http.PostAsJsonAsync("api/user/payment-request", body);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Ödeme talebiniz alındı", Severity.Success);
        }
        else
        {
            Snackbar.Add("Ödeme talebiniz alınamadı.", Severity.Error);
        }
    }

    public class PaymentRequestModel
    {
        public int OrderId { get; set; }
        public decimal Amount { get; set; }
        public string Currency { get; set; } = string.Empty;
    }
}