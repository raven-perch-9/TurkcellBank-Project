@page "/home"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using MudBlazor
@layout MainLayout
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS

@if (!isLoaded)
{
    <!-- Fullscreen loading state -->
    <div style="display:flex; justify-content:center; align-items:center; height:100vh; background:white;">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </div>
}
else
{
<MudLayout>
    <!-- TOP BAR WITH LOGO -->
    <MudAppBar Elevation="0" Style="background-color:#154ba3; height:100px;">
        <MudImage Src="images/Female_Logo.jpg" Alt="Turkcell Logo" Width="140" Class="ml-4" />
        <MudSpacer />
        <MudText Class="mr-4"
                 Style="color:white; font-weight:bold; cursor:pointer; display:inline; margin-top:60px"
                 @onclick="Logout">
            Logout
        </MudText>
    </MudAppBar>

    <!-- MAIN CONTENT -->
    <MudMainContent Style="background-color:white; padding-top:100px;">
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="p-6">

            <!-- WELCOME HEADER -->
            <MudPaper Class="mx-auto mb-6" Style="background:white; padding:20px; border-radius:16px; max-width:600px;">
                <MudText Typo="Typo.h2" Align="Align.Center" Style="color:black;">
                    Welcome, @user?.FullName!
                </MudText>
            </MudPaper>

            <MudGrid GutterSize="2">
                <!-- ACCOUNTS (Left Column) -->
                <MudItem md="6">
                    <MudPaper Class="p-4" Style="border-radius:20px; height:400px; background:#F5F5F5;">
                        <MudText Typo="Typo.h5" Class="mb-3" Style="color:#004B93;">Your Accounts</MudText>
                        <MudTable Items="@accounts" Hover="true" Dense="true" Style="background:white; border-radius:12px;">
                            <HeaderContent>
                                <MudTh>Type</MudTh>
                                <MudTh>Balance</MudTh>
                                <MudTh>IBAN</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.AccountType</MudTd>
                                <MudTd>@context.Balance.ToString("C")</MudTd>
                                <MudTd>@context.Iban</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudPaper>
                </MudItem>

                <!-- CARDS (Right Column) -->
                <MudItem md="6">
                    <MudPaper Class="p-4" Style="border-radius:20px; height:400px; background:#F5F5F5;">
                        <MudText Typo="Typo.h5" Class="mb-3" Style="color:#004B93;">Your Cards</MudText>
                        <MudGrid GutterSize="2">
                            @foreach (var card in cards)
                            {
                                <MudItem md="6">
                                    <MudCard Style="border-radius:15px; background:white;">
                                        <MudCardContent>
                                            <MudText Typo="Typo.subtitle1">@card.CardType</MudText>
                                            <MudText Typo="Typo.h6">**** **** **** @card.Last4Digits</MudText>
                                            <MudText Typo="Typo.caption" Style="color:gray;">Expires: @card.Expiry</MudText>
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudMainContent>
</MudLayout>
}

@code {
    private UserDto? user;
    private List<AccountDto> accounts = new();
    private List<CardDto> cards = new();
    private bool isLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
        if (!string.IsNullOrWhiteSpace(token))
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        try
        {
            user = await Http.GetFromJsonAsync<UserDto>("api/users/me");
            accounts = await Http.GetFromJsonAsync<List<AccountDto>>("api/accounts");
            cards = await Http.GetFromJsonAsync<List<CardDto>>("api/cards");
        }
        finally
        {
            isLoaded = true;
            StateHasChanged();
        }
    }

    private async void Logout()
    {
        await JS.InvokeVoidAsync("sessionStorage.removeItem", "authToken");
        Http.DefaultRequestHeaders.Authorization = null;
        Nav.NavigateTo("/login", true);
    }

    public class UserDto { public string FullName { get; set; } public string Email { get; set; } }
    public class AccountDto { public string AccountType { get; set; } public decimal Balance { get; set; } public string Iban { get; set; } }
    public class CardDto { public string CardType { get; set; } public string Last4Digits { get; set; } public string Expiry { get; set; } }
}